1. In this lesson, you created a middleware function called asyncWrapper. Why?
    a middleware function will help wrap the controllers and make it so we don't have to repeat ourselves. 

2. Suppose that you want to make sure that both a status code and and error message are send back to the user when they 
request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler 
that references that class.

const getTask = asyncWrapper(async (req, res, next) => {
    const { id: taskID } = req.params;
    const task = await Task.findOne({ _id: taskID });
        if (!task) {
         return next(createCustomError(`This task id: ${taskID} is not available`, 404))
    }
    res.status(200).json({ task });
});